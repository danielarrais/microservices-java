version: '3.8'
services:
  db-services:
    image: mysql:8.0
    restart: always
    environment:
      - MYSQL_DATABASE=order-service
      - MYSQL_ROOT_PASSWORD=root
    ports:
      - '3306:3306'
    volumes:
      - db:/var/lib/mysql

  db_keycloak:
    image: mysql:8.0
    restart: always
    environment:
      - MYSQL_DATABASE=keycloak
      - MYSQL_ROOT_PASSWORD=root
      - MYSQL_TCP_PORT=3307
    ports:
      - '3307:3307'
    volumes:
      - db_keycloak:/var/lib/mysql

  keycloak:
    container_name: keycloak
    image: quay.io/keycloak/keycloak:20.0.1
    environment:
      - KEYCLOAK_ADMIN=admin
      - KEYCLOAK_ADMIN_PASSWORD=admin
      - DB_VENDOR=mysql
      - DB_ADDR=mysql-kc
      - DB_PORT=3307
      - DB_USER=root
      - DB_PASSWORD=root
      - DB_DATABASE=keycloak
      - KEYCLOAK_IMPORT=/tmp/realm.json
    ports:
      - '8080:8080'
    command:
      - start-dev
      - --import-realm
    depends_on:
      - db_keycloak
    volumes:
      - ./setup/keycloak/realm.json:/opt/keycloak/data/import/realm.json

  zipkin:
    image: openzipkin/zipkin:latest
    restart: always
    ports:
      - '9411:9411'

  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    container_name: zookeeper
    environment:
      - ZOOKEEPER_CLIENT_PORT=2181
      - ZOOKEEPER_TICK_TIME=2000

  broker:
    image: confluentinc/cp-kafka:7.3.0
    container_name: broker
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://broker:29092
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1
      - KAFKA_TRANSACTION_STATE_LOG_MIN_ISR=1
      - KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR=1

  mongodb:
    container_name: mongo
    image: mongo:5.0
    restart: always
    ports:
      - "27017:27017"
    expose:
      - "27017"

  ## Prometheus
  prometheus:
    image: prom/prometheus:v2.37.1
    container_name: prometheus
    restart: always
    ports:
      - "9090:9090"
    volumes:
      - ./setup/prometheus/config.yml:/etc/prometheus/prometheus.yml
    depends_on:
      - product-service
      - inventory-service
      - order-service
      - notification-service

  grafana:
    image: grafana/grafana-oss:8.5.2
    container_name: grafana
    restart: always
    ports:
      - "3000:3000"
    links:
      - prometheus:prometheus
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=password

  # Microservices
  api-gateway:
    image: danielarrais/api-gateway:latest
    container_name: api-gateway
    ports:
      - "8282:8080"
    expose:
      - "8282"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      - zipkin
      - discovery-server
      - keycloak

  discovery-server:
    image: danielarrais/discovery-server:latest
    container_name: discovery-server
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      - zipkin

  product-service:
    image: danielarrais/product-service:latest
    container_name: product-service
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      - mongodb
      - discovery-server
      - api-gateway
      - zipkin

  inventory-service:
    image: danielarrais/inventory-service:latest
    container_name: inventory-service
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      - zipkin
      - discovery-server
      - db-services
      - api-gateway

  notification-service:
    image: danielarrais/notification-service:latest
    container_name: notification-service
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      - zipkin
      - broker
      - discovery-server
      - api-gateway

  order-service:
    image: danielarrais/order-service:latest
    container_name: order-service
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      - broker
      - zipkin
      - discovery-server
      - api-gateway
      - db-services

volumes:
  db:
    driver: local
  db_keycloak:
    driver: local